<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.Default.props" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.Default.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{367FCAD0-B64C-43F1-B627-A9548DF6836D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>$safeprojectname$</RootNamespace>
    <AssemblyName>$safeprojectname$</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
	<StartAction>Program</StartAction>
    <StartProgram>C:\Program Files\nwjs-v0.12.0-win-x64\nw.exe</StartProgram>
    <StartArguments>.</StartArguments>
    <StartWorkingDirectory>
    </StartWorkingDirectory>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <StartupObject />
  </PropertyGroup>
  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="Scripts\readme.txt" />
    <Content Include="Scripts\_references.js" />
  </ItemGroup>
  <ItemGroup>
    <None Include="extend.ps1" />
    <None Include="zip.ps1" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="package.json"/>
    <Content Include="package.Debug.json">
      <DependentUpon>package.json</DependentUpon>
    </Content>
    <Content Include="package.Release.json">
      <DependentUpon>package.json</DependentUpon>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <Content Include="index.html">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <TypeScriptSourceMap>False</TypeScriptSourceMap>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets')" />
  <PropertyGroup>
    <PreBuildEvent>IF "$(ConfigurationName)" EQU "Release" (
	echo Cleaning output directory: $(TargetDir)
	del /S /Q "$(TargetDir)*.*"
	REM del /S /Q "$(TargetDir)*.js.map"
	echo.
)</PreBuildEvent>
  </PropertyGroup>
  <PropertyGroup>
    <PostBuildEvent>echo Deleting redundant files from output directory: $(TargetDir)
del /S /Q "$(TargetDir)$(TargetName)$(TargetExt)"
del /S /Q "$(TargetDir)$(TargetName)$(TargetExt).config"
del /S /Q "$(TargetDir)$(TargetName).pdb"
echo.
IF NOT EXIST "$(ProjectDir)package.$(ConfigurationName).json" (
	echo WARRNING: Extended configuration file "$(ProjectDir)package.$(ConfigurationName).json" was not found. Using default.
	copy /Y "$(ProjectDir)package.json" "$(TargetDir)$package.json"
) ELSE (
	IF EXIST "$(ProjectDir)$(TargetName).nw" (
		echo Deleting old package.json: $(TargetDir)package.json
		del /S /Q "$(TargetDir)package.json"
		echo.
	)
	echo Building package.json for configuration $(ConfigurationName): $(TargetDir)package.json
	powershell -executionpolicy remotesigned -File "$(ProjectDir)extend.ps1" "$(ProjectDir)package.json" "$(ProjectDir)package.$(ConfigurationName).json" "$(TargetDir)package.json"
	echo.
)
REM If release create nw package
IF "$(ConfigurationName)" EQU "Release" (
	IF EXIST "$(ProjectDir)$(TargetName).nw" (
		echo Deleting old package: $(ProjectDir)$(TargetName).nw
		del /S /Q "$(ProjectDir)$(TargetName).nw"
		echo.
	)
	echo Building package: $(ProjectDir)$(TargetName).nw
	powershell -executionpolicy remotesigned -File "$(ProjectDir)zip.ps1" "$(TargetDir)\" "$(ProjectDir)$(TargetName).nw"
	IF NOT EXIST "$(ProjectDir)$(TargetName).nw" (
		echo ERROR: Building package "$(ProjectDir)$(TargetName).nw" failed!
	)
 )</PostBuildEvent>
  </PropertyGroup>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>